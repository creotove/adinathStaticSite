{"version":3,"file":"static/js/810.dde1e767.chunk.js","mappings":"2PA0JA,UAxIc,WACZ,IAAMA,GAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,KAAKA,IAAI,IAC7CG,GAAWF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASA,QAAQ,IAEzDC,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,cAAWC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,GAE1BhB,EAAK,CAADe,EAAAE,KAAA,QACyB,OAAzBL,EAAWZ,EAAKY,SAASG,EAAAE,KAAA,EACbC,EAAAA,EAAMC,KAAK,2CAA4C,CAAEP,SAAAA,IAAW,QAAhFC,EAAGE,EAAAK,MACDC,KAAKC,QACNT,EAAIQ,KAAKA,MAAiC,IAAzBR,EAAIQ,KAAKA,KAAKE,OAGZ,OAAlBV,EAAIQ,KAAKA,MACXjB,EAASoB,EAAAA,GAAcC,QAAQC,YAAY,OAC3CC,QAAQC,IAAI,QAEZxB,EAASoB,EAAAA,GAAcC,QAAQC,YAAYb,EAAIQ,KAAKA,OACpDM,QAAQC,IAAIf,EAAIQ,KAAKA,OAPvBQ,EAAAA,GAAQC,KAAK,qBAWfD,EAAAA,GAAQE,MAAMlB,EAAIQ,KAAKQ,SACxB,OAAAd,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAiB,GAAAjB,EAAA,SAGHc,EAAAA,GAAQE,MAAM,6BACdJ,QAAQC,IAAGb,EAAAiB,IAAO,yBAAAjB,EAAAkB,OAAA,GAAAtB,EAAA,kBAEnB,CAACX,EAAMI,IAKV,OAHA8B,EAAAA,EAAAA,YAAU,WACR5B,GACF,GAAG,CAACA,KAEF6B,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,OAAK,EAAAC,UACfH,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAD,UACHH,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,IAAE,EAAAH,UACNI,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CAACC,MAAM,SAASC,UAAU,cAAcC,OAAK,EAACC,YAAU,EAAAT,SAAA,EAC7DH,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,MAAM,QAAOX,UACvBI,EAAAA,EAAAA,MAACQ,EAAAA,GAAS,CAAAZ,SAAA,EACRH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,UAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,YAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,iBAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,YAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,YAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,WAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,YAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,kBAELH,EAAAA,EAAAA,KAACgB,EAAAA,GAAgB,CAACN,UAAU,cAAaP,UACvCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,mBAITH,EAAAA,EAAAA,KAACiB,EAAAA,GAAU,CAAAd,SACRnC,GAAYA,EACXA,EAASkD,KAAI,SAACC,EAAMC,GAAK,OACvBb,EAAAA,EAAAA,MAACQ,EAAAA,GAAS,CAAC,QAAM,qBAAoBZ,SAAA,EACnCH,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,UACrCH,EAAAA,EAAAA,KAAA,UAAAG,SAASiB,EAAQ,OAEnBpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SACpC,IAAImB,KAAKzD,EAAK0D,WAAWC,wBAE5BxB,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SAAEgB,EAAK1C,YAC9CuB,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SAAEgB,EAAKM,QAC9CzB,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SAAEgB,EAAKO,QAC9C1B,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SAAEgB,EAAKQ,OAC9C3B,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SAAEgB,EAAKS,QAC9C5B,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SAAEgB,EAAKU,aAC9C7B,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAaP,SAElB,YAAhBgB,EAAKW,QAAuB9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAM,CAACjB,MAAM,UAAUkB,MAAM,eAAc7B,SAAC,aAAmBH,EAAAA,EAAAA,KAAC+B,EAAAA,GAAM,CAACjB,MAAM,UAAUkB,MAAM,eAAc7B,SAAC,iBAfrGiB,EAiB/B,KAGdpB,EAAAA,EAAAA,KAACe,EAAAA,GAAS,CAAC,QAAM,qBAAoBZ,UACnCH,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CAACX,UAAU,cAAcuB,QAAS,EAAE9B,UACjDH,EAAAA,EAAAA,KAAA,MAAIU,UAAU,0BAAyBP,SAAC,oCAqC5D,C","sources":["views/partners/AllPartners/Index.js"],"sourcesContent":["import {\n  CBadge,\n  CCol,\n  CContainer,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { message } from 'antd'\nimport axios from 'axios'\nimport React, { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { partnersSlice } from '../../../features/partnersSlice'\n\nconst Index = () => {\n  const user = useSelector((state) => state.user.user)\n  const partners = useSelector((state) => state.partners.partners)\n\n  const dispatch = useDispatch()\n\n  const getMypartners = useCallback(async () => {\n    try {\n      if (user) {\n        const uniqueId = user.uniqueId // Assuming user has a uniqueId property\n        const res = await axios.post('/api/v1/user/getAllPartnersCreatedByUser', { uniqueId })\n        if (res.data.success) {\n          if (!res.data.data || res.data.data.length === 0) {\n            message.info('No Partners Found')\n          } else {\n            if (res.data.data === null) {\n              dispatch(partnersSlice.actions.setPartners(null))\n              console.log(null)\n            } else {\n              dispatch(partnersSlice.actions.setPartners(res.data.data))\n              console.log(res.data.data)\n            }\n          }\n        } else {\n          message.error(res.data.message)\n        }\n      }\n    } catch (error) {\n      message.error('Error in getting Partners')\n      console.log(error)\n    }\n  }, [user, dispatch])\n\n  useEffect(() => {\n    getMypartners()\n  }, [getMypartners])\n  return (\n    <CContainer fluid>\n      <CRow>\n        <CCol xs>\n          <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n            <CTableHead color=\"light\">\n              <CTableRow>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>Sn</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>Date</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>Unique Id</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>Role</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>Name</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>PAN</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>City</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>Created By</b>\n                </CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">\n                  <b>Status</b>\n                </CTableHeaderCell>\n              </CTableRow>\n            </CTableHead>\n            <CTableBody>\n              {partners && partners ? (\n                partners.map((item, index) => (\n                  <CTableRow v-for=\"item in tableItems\" key={index}>\n                    <CTableDataCell className=\"text-center\">\n                      <strong>{index + 1}</strong>\n                    </CTableDataCell>\n                    <CTableDataCell className=\"text-center\">\n                      {new Date(user.createdAt).toLocaleDateString()}\n                    </CTableDataCell>\n                    <CTableDataCell className=\"text-center\">{item.uniqueId}</CTableDataCell>\n                    <CTableDataCell className=\"text-center\">{item.role}</CTableDataCell>\n                    <CTableDataCell className=\"text-center\">{item.name}</CTableDataCell>\n                    <CTableDataCell className=\"text-center\">{item.pan}</CTableDataCell>\n                    <CTableDataCell className=\"text-center\">{item.city}</CTableDataCell>\n                    <CTableDataCell className=\"text-center\">{item.createdBy}</CTableDataCell>\n                    <CTableDataCell className=\"text-center\">\n                      \n                        {item.status === 'pending' ? <CBadge color=\"warning\" shape=\"rounded-pill\">Pending</CBadge> : <CBadge color=\"success\" shape=\"rounded-pill\">Approved</CBadge>} \n                    </CTableDataCell>\n                  </CTableRow>\n                ))\n              ) : (\n                <CTableRow v-for=\"item in tableItems\">\n                  <CTableDataCell className=\"text-center\" colSpan={9}>\n                    <h4 className=\"text-center text-danger\">No partners Found</h4>\n                  </CTableDataCell>\n                </CTableRow>\n              )}\n\n              {/* {tableExample.map((item, index) => (\n                <CTableRow v-for=\"item in tableItems\" key={index}>\n                  <CTableDataCell className=\"text-center\">\n                    <strong>{index + 1}</strong>\n                  </CTableDataCell>\n                  <CTableDataCell className=\"text-center\">\n                    <CAvatar size=\"md\" src={item.avatar.src} status={item.avatar.status} />\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <div>{item.user.name}</div>\n                    <div className=\"small text-medium-emphasis\">\n                      <span>{item.user.new ? 'Aprroved' : 'Pending'}</span> | Registered:{' '}\n                    </div>\n                  </CTableDataCell>\n                  <CTableDataCell className=\"text-center\">\n                    <CIcon size=\"xl\" icon={item.payment.icon} />\n                  </CTableDataCell>\n                  <CTableDataCell className=\"text-center\">\n                    <strong>{item.usage.value}</strong>\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <div className=\"small text-medium-emphasis\">Last login</div>\n                    <strong>{item.activity}</strong>\n                  </CTableDataCell>\n                </CTableRow>\n              ))} */}\n            </CTableBody>\n          </CTable>\n        </CCol>\n      </CRow>\n    </CContainer>\n  )\n}\n\nexport default Index\n"],"names":["user","useSelector","state","partners","dispatch","useDispatch","getMypartners","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","uniqueId","res","wrap","_context","prev","next","axios","post","sent","data","success","length","partnersSlice","actions","setPartners","console","log","message","info","error","t0","stop","useEffect","_jsx","CContainer","fluid","children","CRow","CCol","xs","_jsxs","CTable","align","className","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","Date","createdAt","toLocaleDateString","role","name","pan","city","createdBy","status","CBadge","shape","colSpan"],"sourceRoot":""}